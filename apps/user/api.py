import binasciiimport osfrom rest_framework import viewsetsfrom rest_framework.decorators import list_routefrom core.decorator.response import Core_connectorfrom utils.exceptions import PubErrorCustomfrom apps.user.serializers import UsersSerializer1from apps.user.models import Users,Login,Tokenfrom auth.authentication import Authenticationfrom libs.utils.google_auth import check_google_tokenfrom django.shortcuts import HttpResponsefrom apps.utils import RedisQQbotclass UserAPIView(viewsets.ViewSet):    @list_route(methods=['POST'])    @Core_connector(transaction=True,serializer_class=UsersSerializer1,model_class=Users)    def register(self, request,*args,**kwargs):        serializer = kwargs.pop('serializer')        isinstance=serializer.save()        isinstance.status=1        isinstance.save()        return {"msg":"添加成功！"}    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def login(self, request, *args, **kwargs):        userlogin=Login()        try:            user = Users.objects.get(loginname=request.data_format.get('loginname'))        except Users.DoesNotExist:            raise PubErrorCustom("登录账户错误！")        if user.passwd != self.request.data_format.get('passwd'):            raise PubErrorCustom("密码错误！")        # if not request.data_format.get('vercode') or not len(request.data_format.get('vercode')):        #     raise PubErrorCustom("请输入谷歌验证码!")        #        # if not check_google_token(user.google_token,request.data_format.get('vercode')):        #     raise PubErrorCustom("谷歌验证码错误!")        if user.status == 1 :            raise PubErrorCustom("登录账户错误！")        elif user.status == 2 :            raise PubErrorCustom("已冻结！")        userlogin.userid=user.userid        userlogin.ip = request.META.get('REMOTE_ADDR')        userlogin.user_agent =request.META.get('HTTP_USER_AGENT')        userlogin.save()        token = Token.objects.filter(userid=user.userid)        if not token.exists():            token = Token.objects.create(userid=user.userid)        else:            token = token[0]            token.key = binascii.hexlify(os.urandom(80)).decode()            token.save()        header = {"authorization": token.key}        return { "header": header,"msg":"登录成功！"}    @list_route(methods=['POST'])    def qqbot(self,request):        print(request.data)        if 'allwin_qqbot_start' in request.data.get("message"):            message = request.data.get("message").split('||')[0]            name = request.data.get("message").split('||')[1]        else:            return HttpResponse("ok")        if request.data.get("message_type")  in [ 'group','discuss'] and message == 'allwin_qqbot_start':            redis_handler = RedisQQbot(qqacc=request.data.get("self_id"))            res = redis_handler.redis_dict_get()            print(res)            if res and 'data' in res:                isFlag = True                for item in res['data']:                    if ('message_type' in item and item.get('message_type') == 'group' and item.get('id') == request.data.get("group_id")) or \                            ('message_type' in item and item.get('message_type') == 'discuss' and item.get('id') == request.data.get("discuss_id")):                        isFlag = False                        break                if isFlag :                    res['data'].append({                        'message_type' :  request.data.get("message_type"),                        'id' :  request.data.get("group_id") if request.data.get("message_type")=='group' else request.data.get("discuss_id"),                        'name' : name                    })                    redis_handler.redis_dict_insert(res)        return HttpResponse("ok")